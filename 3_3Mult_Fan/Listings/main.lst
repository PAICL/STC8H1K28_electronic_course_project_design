C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          //===============================================================
   2          // 本项目基于STC8H1K28开发板以及STC官方Damo程序开发
   3          // 本程序功能有三种控制，分别为按键控制，串口控制以及温度控制风扇转速
   4          // 按键控制主要通过按键切换风扇转速
   5          // 串口控制主要通过串口输出"FAN0#"到"FAN9#"来控制P10端口上的PWM控制占空比(1kHz)?
   6          // 温度控制主要通过检测当前温度是否达到判定某一个值来决定风扇转速的值
   7          // 频率为22.1184MHz，波特率为115200
   8          // DATA:2024/10/23
   9          //===============================================================
  10          #include "stc8h.h"
  11          #include "intrins.h"
  12          #include "string.h"
  13          #define MAIN_Fosc 22118400L
  14          
  15          typedef unsigned char u8;
  16          typedef unsigned int u16;
  17          typedef unsigned long u32;
  18          typedef signed char int8;
  19          typedef signed int int16;
  20          typedef signed long int32;
  21          typedef unsigned char uint8;
  22          typedef unsigned int uint16;
  23          typedef unsigned long uint32;
  24          #define TRUE 1
  25          #define FALSE 0
  26          
  27          #define Baudrate1 115200L
  28          #define UART1_BUF_LENGTH 8
  29          bit receiving_complete = 0;
  30          u8 TX1_Cnt;
  31          u8 RX1_Cnt;
  32          bit B_TX1_Busy;
  33          u8 xdata RX1_Buffer[UART1_BUF_LENGTH];
  34          void UART1_config(u8 brt);
  35          void PrintString1(u8 *puts);
  36          
  37          void IO_Init();
  38          
  39          //@22.1184MHz
  40          void delay_us(uint16 us)
  41          {
  42   1          while (us--)
  43   1          {
  44   2              _nop_();
  45   2              _nop_();
  46   2              _nop_();
  47   2              _nop_();
  48   2              _nop_();
  49   2              _nop_();
  50   2              _nop_();
  51   2              _nop_();
  52   2              _nop_();
  53   2              _nop_();
  54   2              _nop_();
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 2   

  55   2              _nop_();
  56   2              _nop_();
  57   2              _nop_();
  58   2              _nop_();
  59   2              _nop_();
  60   2              _nop_();
  61   2              _nop_();
  62   2              _nop_();
  63   2              _nop_();
  64   2              _nop_();
  65   2              _nop_();
  66   2          }
  67   1      }
  68          void delay_ms(uint16 ms)
  69          {
  70   1          while (ms--)
  71   1          {
  72   2              unsigned char i;
  73   2              for (i = 0; i < 18; i++)
  74   2              {
  75   3                  delay_us(56);
  76   3              }
  77   2          }
  78   1      }
  79          void Delaykey1();
  80          void Delaykey2();
  81          
  82          void Shutdown_LED();
  83          void Ctrl_LED(unsigned char *rxdata);
  84          
  85          void PrintString1(u8 *puts);
  86          void SetTimer2Baudraye(u16 dat);
  87          void UART1_config(u8 brt);
  88          
  89          enum UART_State
  90          {
  91              UART_IDLE,
  92              UART_RECEIVE,
  93              UART_SEND
  94          };
  95          
  96          #define Timer0_Reload (65536UL - (MAIN_Fosc / 1000))
  97          
  98          u8 Temp_Send_Done = 0;
  99          
 100          sbit key1 = P3 ^ 2;
 101          sbit key2 = P3 ^ 3;
 102          volatile unsigned char Key_Switch = 0; // P32控制风扇工作模式，默认为按键控制[Key_Switch = 0]/串口控制[Key
             -_Switch = 1]/温度控制[Key_Switch = 2]
 103          volatile unsigned char Key_State = 0;
 104          volatile unsigned char Uart_State = 0;
 105          volatile unsigned char Temp_State = 0;
 106          volatile unsigned char Fan_State = 0;
 107          #define PWM1_1 0x00
 108          #define PWM1_2 0x01
 109          #define PWM1_3 0x02
 110          
 111          #define ENO1P 0x01
 112          #define ENO1N 0x02
 113          
 114          #define PWM_PERIOD 1023
 115          
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 3   

 116          bit B_1ms;
 117          
 118          u16 PWM1_Duty;
 119          
 120          bit PWM1_Flag;
 121          
 122          void UpdatePwm(void);
 123          
 124          //===============================================
 125          //==========DS18B20===========
 126          unsigned char TMPL, TMPH;
 127          sbit DQ = P2 ^ 3;
 128          // DS18B20复位
 129          unsigned DS18B20_Reset()
 130          {
 131   1          unsigned char x;
 132   1          DQ = 1;
 133   1          DQ = 0;
 134   1          delay_us(700);
 135   1          DQ = 1;
 136   1          delay_us(30);
 137   1          x = DQ;
 138   1          while (!DQ)
 139   1              ;
 140   1          return x;
 141   1      }
 142          // DS18B20读一位数据函数
 143          unsigned DS18B20_readbit()
 144          {
 145   1          bit x;
 146   1          unsigned i;
 147   1          DQ = 1;
 148   1          i++;
 149   1          DQ = 0;
 150   1          delay_us(6);
 151   1          DQ = 1;
 152   1          i++;
 153   1          i++;
 154   1          x = DQ;
 155   1          delay_us(50);
 156   1          return (x);
 157   1      }
 158          // DS18B20写一位函数
 159          void DS18B20_writebit(unsigned aa)
 160          {
 161   1          unsigned char i;
 162   1          DQ = 1;
 163   1          i++;
 164   1          DQ = 0;
 165   1          i++;
 166   1          DQ = aa;
 167   1          delay_us(50);
 168   1          DQ = 1;
 169   1      }
 170          // DS18B20读一个字节函数
 171          unsigned DS18B20_readbyte()
 172          {
 173   1          unsigned i, j, dat;
 174   1          dat = 0;
 175   1          j = 1;
 176   1          for (i = 0; i < 8; i++)
 177   1          {
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 4   

 178   2              if (DS18B20_readbit())
 179   2              {
 180   3                  dat = dat + (j << i);
 181   3              }
 182   2          }
 183   1          return (dat);
 184   1      }
 185          // DS18B20写一个字节函数
 186          void DS18B20_writebyte(unsigned char dat)
 187          {
 188   1          unsigned int temp;
 189   1          unsigned char j;
 190   1          for (j = 0; j < 8; j++)
 191   1          {
 192   2              temp = dat >> j;
 193   2              temp = temp & 0x01;
 194   2              DS18B20_writebit(temp);
 195   2          }
 196   1      }
 197          // DS18b20读供电方式
 198          bit DS18B20_readpower()
 199          {
 200   1          bit x;
 201   1          while (DS18B20_Reset())
 202   1              ;
 203   1          DS18B20_writebyte(0xcc);
 204   1          DS18B20_writebyte(0xb4);
 205   1          x = DQ;
 206   1          delay_us(10);
 207   1          return x;
 208   1      }
 209          // DS18B20精度设置函数
 210          void DS18B20_SetResolution(unsigned char res)
 211          {
 212   1          switch (res)
 213   1          {
 214   2          case 9:
 215   2              res = 0;
 216   2              break;
 217   2          case 10:
 218   2              res = 1;
 219   2              break;
 220   2          case 11:
 221   2              res = 2;
 222   2              break;
 223   2          case 12:
 224   2              res = 3;
 225   2              break;
 226   2          }
 227   1          while (DS18B20_Reset())
 228   1              ;
 229   1          DS18B20_writebyte(0x4e);
 230   1          DS18B20_writebyte(0xff);
 231   1          DS18B20_writebyte(0xff);
 232   1          DS18B20_writebyte(0x1f | (res << 5));
 233   1      }
 234          // DS18B20温度读取函数
 235          long DS18B20_GetTemperature()
 236          {
 237   1          long Temp;
 238   1          while (DS18B20_Reset())
 239   1              ;
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 5   

 240   1          DS18B20_writebyte(0xcc);
 241   1          DS18B20_writebyte(0x44);
 242   1          while (DS18B20_Reset())
 243   1              ;
 244   1          DS18B20_writebyte(0xcc);
 245   1          DS18B20_writebyte(0xbe);
 246   1          TMPL = DS18B20_readbyte();
 247   1          TMPH = DS18B20_readbyte();
 248   1          Temp = TMPH << 8 | TMPL;
 249   1          Temp = Temp * 0.0625;
 250   1          return Temp;
 251   1      }
 252          
 253          /*
 254          int my_strcmp(const char *str1, const char *str2)
 255          {
 256              while (*str1 != '\0' && *str2 != '\0')
 257              {
 258                  if (*str1 != *str2)
 259                  {
 260                      return (unsigned char)*str1 - (unsigned char)*str2;
 261                  }
 262                  str1++;
 263                  str2++;
 264              }
 265              return (unsigned char)*str1 - (unsigned char)*str2;
 266          }
 267          */
 268          
 269          /*
 270          void longToString(long value, char *buffer)
 271          {
 272              int i, j = 0;
 273              int isNegative = 0;
 274          
 275              // 处理负数
 276              if (value < 0)
 277              {
 278                  isNegative = 1;
 279                  value = -value;
 280              }
 281          
 282              // 将数字转换为字符串
 283              do
 284              {
 285                  buffer[i++] = (value % 10) + '0'; // 获取最低位数字并转换为字符
 286                  value /= 10;                      // 去掉最低位
 287              } while (value > 0);
 288          
 289              if (isNegative)
 290              {
 291                  buffer[i++] = '-'; // 添加负号
 292              }
 293          
 294              // 反转字符串
 295              buffer[i] = '\0'; // 结束字符串
 296              for (j = 0; j < i / 2; j++)
 297              {
 298                  char temp = buffer[j];
 299                  buffer[j] = buffer[i - j - 1];
 300                  buffer[i - j - 1] = temp;
 301              }
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 6   

 302          }
 303          void sendTemperature(long temperature)
 304          {
 305              char buffer[20];                   // 用于存储转换后的字符串
 306              longToString(temperature, buffer); // 转换为字符串
 307              PrintString1(buffer);              // 通过打印函数发送
 308          }
 309          */
 310          
 311          void testled()
 312          {
 313   1          P00 = 0;
 314   1          P01 = 0;
 315   1          P02 = 0;
 316   1          delay_ms(1000);
 317   1          P00 = 1;
 318   1          P01 = 1;
 319   1          P02 = 1;
 320   1      }
 321          
 322          void main()
 323          {
 324   1      
 325   1          long temperature; //=================
 326   1      
 327   1          char RX_Data[UART1_BUF_LENGTH] = 0x00;
 328   1          unsigned char i = 0x00;
 329   1          enum UART_State currentState = UART_IDLE;
 330   1      
 331   1          IO_Init();
 332   1          testled();
 333   1      
 334   1          DS18B20_readpower();       //=====================
 335   1          DS18B20_SetResolution(12); //======================
 336   1      
 337   1          UART1_config(1);
 338   1          EA = 1;
 339   1          PWM1_Flag = 0;
 340   1          PWM1_Duty = 0;
 341   1      
 342   1          AUXR = 0x80;
 343   1          TH0 = (u8)(Timer0_Reload / 256);
 344   1          TL0 = (u8)(Timer0_Reload % 256);
 345   1          ET0 = 1;
 346   1          TR0 = 1;
 347   1      
 348   1          IT0 = 1;
 349   1          EX0 = 1;
 350   1          IT1 = 1;
 351   1          EX1 = 1;
 352   1          EA = 1;
 353   1      
 354   1          PWMA_CCER1 = 0x00;
 355   1          PWMA_CCER2 = 0x00;
 356   1          PWMA_CCMR1 = 0x68;
 357   1          PWMA_CCMR2 = 0x68;
 358   1          PWMA_CCMR3 = 0x68;
 359   1          PWMA_CCMR4 = 0x68;
 360   1          PWMA_CCER1 = 0x55;
 361   1          PWMA_CCER2 = 0x55;
 362   1      
 363   1          PWMA_ARRH = (u8)(PWM_PERIOD >> 8);
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 7   

 364   1          PWMA_ARRL = (u8)PWM_PERIOD;
 365   1      
 366   1          PWMA_ENO = 0x00;
 367   1          PWMA_ENO |= ENO1P;
 368   1          PWMA_ENO |= ENO1N;
 369   1      
 370   1          PWMA_PS = 0x00;
 371   1          PWMA_PS |= P10;
 372   1      
 373   1          PWMA_BKR = 0x80;
 374   1          PWMA_CR1 |= 0x01;
 375   1      
 376   1          UART1_config(1);
 377   1      
 378   1          delay_ms(1);
 379   1      
 380   1          EA = 1;
 381   1      
 382   1          while (1)
 383   1          {
 384   2              if (Key_Switch == 0)
 385   2              {
 386   3                  if (key2 == 0)
 387   3                  {
 388   4                      Delaykey2();
 389   4                      if (key2 == 0)
 390   4                      {
 391   5                          Key_State++;
 392   5                          if (Key_State > 4)
 393   5                          {
 394   6                              Key_State = 0;
 395   6                          }
 396   5                      }
 397   4                  }
 398   3              }
 399   2              else if (Key_Switch == 1)
 400   2              {
 401   3                  char RX_Data[UART1_BUF_LENGTH];
 402   3                  unsigned char i;
 403   3      
 404   3                  if (receiving_complete)
 405   3                  {
 406   4                      for (i = 0; i < RX1_Cnt; i++)
 407   4                      {
 408   5                          RX_Data[i] = RX1_Buffer[i];
 409   5                      }
 410   4                      RX_Data[RX1_Cnt] = '\0';
 411   4      
 412   4                      Ctrl_LED(RX_Data);
 413   4      
 414   4                      RX1_Cnt = 0;
 415   4                      receiving_complete = 0;
 416   4                  }
 417   3              }
 418   2              else if (Key_Switch == 2)
 419   2              {
 420   3                  /*
 421   3                  Temp_Send_Done = 0;
 422   3                  temperature = DS18B20_GetTemperature();
 423   3                  sendTemperature(temperature);
 424   3                  // delay_ms(200);
 425   3                  Temp_Send_Done = 1;
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 8   

 426   3                  */
 427   3                  temperature = DS18B20_GetTemperature();
 428   3                  if (temperature < 26)
 429   3                      Temp_State = 0;
 430   3                  if (temperature >= 26 && temperature < 27)
 431   3                      Temp_State = 1;
 432   3                  if (temperature >= 27 && temperature < 28)
 433   3                      Temp_State = 2;
 434   3                  if (temperature >= 28 && temperature < 29)
 435   3                      Temp_State = 3;
 436   3                  if (temperature >= 29 && temperature < 30)
 437   3                      Temp_State = 4;
 438   3                  if (temperature >= 30 && temperature < 45)
 439   3                      Temp_State = 5;
 440   3                  delay_ms(100);
 441   3              }
 442   2          }
 443   1      }
 444          
 445          void IO_Init()
 446          {
 447   1          P_SW2 |= 0x80;
 448   1          P0M1 = 0x00;
 449   1          P0M0 = 0x00;
 450   1          P1M1 = 0x00;
 451   1          P1M0 = 0x00;
 452   1          P2M1 = 0x00;
 453   1          P2M0 = 0x00;
 454   1          P3M1 = 0x00;
 455   1          P3M0 = 0x00;
 456   1      }
 457          
 458          void Delaykey1()
 459          {
 460   1          u8 ms = 50;
 461   1          while (ms--)
 462   1          {
 463   2              unsigned char i;
 464   2              for (i = 0; i < 18; i++)
 465   2              {
 466   3                  delay_us(56);
 467   3              }
 468   2          }
 469   1      }
 470          
 471          void Delaykey2()
 472          {
 473   1          u8 ms = 60;
 474   1          while (ms--)
 475   1          {
 476   2              unsigned char i;
 477   2              for (i = 0; i < 18; i++)
 478   2              {
 479   3                  delay_us(56);
 480   3              }
 481   2          }
 482   1      }
 483          
 484          void Shutdown_LED()
 485          {
 486   1          P00 = 1;
 487   1          P01 = 1;
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 9   

 488   1          P02 = 1;
 489   1      }
 490          
 491          void Ctrl_LED(unsigned char *rxdata)
 492          {
 493   1      
 494   1          Shutdown_LED();
 495   1          if (strcmp(rxdata, "FAN0") == 0)
 496   1          {
 497   2              Uart_State = 0;
 498   2          }
 499   1          else if (strcmp(rxdata, "FAN1") == 0)
 500   1          {
 501   2              Uart_State = 1;
 502   2          }
 503   1          else if (strcmp(rxdata, "FAN2") == 0)
 504   1          {
 505   2              Uart_State = 2;
 506   2          }
 507   1          else if (strcmp(rxdata, "FAN3") == 0)
 508   1          {
 509   2              Uart_State = 3;
 510   2          }
 511   1          else if (strcmp(rxdata, "FAN4") == 0)
 512   1          {
 513   2              Uart_State = 4;
 514   2          }
 515   1          else if (strcmp(rxdata, "FAN5") == 0)
 516   1          {
 517   2              Uart_State = 5;
 518   2          }
 519   1          else if (strcmp(rxdata, "FAN6") == 0)
 520   1          {
 521   2              Uart_State = 6;
 522   2          }
 523   1          else if (strcmp(rxdata, "FAN7") == 0)
 524   1          {
 525   2              Uart_State = 7;
 526   2          }
 527   1          else if (strcmp(rxdata, "FAN8") == 0)
 528   1          {
 529   2              Uart_State = 8;
 530   2          }
 531   1          else if (strcmp(rxdata, "FAN9") == 0)
 532   1          {
 533   2              Uart_State = 9;
 534   2          }
 535   1      }
 536          
 537          void PrintString1(u8 *puts)
 538          {
 539   1          for (; *puts != 0; puts++)
 540   1          {
 541   2              SBUF = *puts;
 542   2              B_TX1_Busy = 1;
 543   2              while (B_TX1_Busy)
 544   2                  ;
 545   2          }
 546   1      }
 547          
 548          void SetTimer2Baudraye(u16 dat)
 549          {
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 10  

 550   1          AUXR &= ~(1 << 4);
 551   1          AUXR &= ~(1 << 3);
 552   1          AUXR |= (1 << 2);
 553   1          T2H = dat / 256;
 554   1          T2L = dat % 256;
 555   1          IE2 &= ~(1 << 2);
 556   1          AUXR |= (1 << 4);
 557   1      }
 558          
 559          void UART1_config(u8 brt)
 560          {
 561   1          if (brt == 2)
 562   1          {
 563   2              AUXR |= 0x01;
 564   2              SetTimer2Baudraye(65536UL - (MAIN_Fosc / 4) / Baudrate1);
 565   2          }
 566   1      
 567   1          else
 568   1          {
 569   2              TR1 = 0;
 570   2              AUXR &= ~0x01;
 571   2              AUXR |= (1 << 6);
 572   2              TMOD &= ~(1 << 6);
 573   2              TMOD &= ~0x30;
 574   2              TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) / 256);
 575   2              TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) % 256);
 576   2              ET1 = 0;
 577   2              INTCLKO &= ~0x02;
 578   2              TR1 = 1;
 579   2          }
 580   1      
 581   1          SCON = (SCON & 0x3f) | 0x40;
 582   1          ES = 1;
 583   1          REN = 1;
 584   1      
 585   1          P_SW1 &= 0x3f;
 586   1          P_SW1 |= 0x00;
 587   1      
 588   1          B_TX1_Busy = 0;
 589   1          TX1_Cnt = 0;
 590   1          RX1_Cnt = 0;
 591   1      }
 592          
 593          void UART1_int(void) interrupt 4
 594          {
 595   1          if (RI)
 596   1          {
 597   2              RI = 0;
 598   2              RX1_Buffer[RX1_Cnt] = SBUF;
 599   2              if (RX1_Buffer[RX1_Cnt] == '#')
 600   2              {
 601   3                  receiving_complete = 1;
 602   3              }
 603   2              else
 604   2              {
 605   3                  if (++RX1_Cnt >= UART1_BUF_LENGTH)
 606   3                  {
 607   4                      RX1_Cnt = 0;
 608   4                  }
 609   3              }
 610   2          }
 611   1          if (TI)
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 11  

 612   1          {
 613   2              TI = 0;
 614   2              B_TX1_Busy = 0;
 615   2          }
 616   1      }
 617          
 618          void timer0(void) interrupt 3 using 2
 619          {
 620   1          if (Key_Switch == 0)
 621   1          {
 622   2              P00 = 0;
 623   2              P01 = P02 = 1;
 624   2              Uart_State = 0;
 625   2              Temp_State = 0;
 626   2              if (Key_State == 0)
 627   2              {
 628   3                  PWM1_Duty = 0;
 629   3              }
 630   2              if (Key_State == 1)
 631   2              {
 632   3                  PWM1_Duty = 341;
 633   3              }
 634   2              if (Key_State == 2)
 635   2              {
 636   3                  PWM1_Duty = 682;
 637   3              }
 638   2              if (Key_State == 3)
 639   2              {
 640   3                  PWM1_Duty = 1023;
 641   3              }
 642   2          }
 643   1      
 644   1          if (Key_Switch == 1)
 645   1          {
 646   2              P01 = 0;
 647   2              P00 = P02 = 1;
 648   2              Key_State = 0;
 649   2              Temp_State = 0;
 650   2              if (Uart_State == 0)
 651   2              {
 652   3                  PWM1_Duty = 0;
 653   3              }
 654   2              else if (Uart_State == 1)
 655   2              {
 656   3                  PWM1_Duty = 113;
 657   3              }
 658   2              else if (Uart_State == 2)
 659   2              {
 660   3                  PWM1_Duty = 227;
 661   3              }
 662   2              else if (Uart_State == 3)
 663   2              {
 664   3                  PWM1_Duty = 341;
 665   3              }
 666   2              else if (Uart_State == 4)
 667   2              {
 668   3                  PWM1_Duty = 454;
 669   3              }
 670   2              else if (Uart_State == 5)
 671   2              {
 672   3                  PWM1_Duty = 568;
 673   3              }
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 12  

 674   2              else if (Uart_State == 6)
 675   2              {
 676   3                  PWM1_Duty = 682;
 677   3              }
 678   2              else if (Uart_State == 7)
 679   2              {
 680   3                  PWM1_Duty = 795;
 681   3              }
 682   2              else if (Uart_State == 8)
 683   2              {
 684   3                  PWM1_Duty = 909;
 685   3              }
 686   2              else if (Uart_State == 9)
 687   2              {
 688   3                  PWM1_Duty = 1023;
 689   3              }
 690   2          }
 691   1          if (Key_Switch == 2)
 692   1          {
 693   2              P02 = 0;
 694   2              P00 = P01 = 1;
 695   2      
 696   2              Key_State = 0;
 697   2              Uart_State = 0;
 698   2              if (Temp_State == 0)
 699   2                  PWM1_Duty = 0;
 700   2              if (Temp_State == 1)
 701   2                  PWM1_Duty = 350;
 702   2              if (Temp_State == 2)
 703   2                  PWM1_Duty = 500;
 704   2              if (Temp_State == 3)
 705   2                  PWM1_Duty = 650;
 706   2              if (Temp_State == 4)
 707   2                  PWM1_Duty = 800;
 708   2              if (Temp_State == 5)
 709   2                  PWM1_Duty = 1023;
 710   2          }
 711   1          UpdatePwm();
 712   1      }
 713          
 714          void UpdatePwm(void)
 715          {
 716   1          PWMA_CCR1H = (u8)(PWM1_Duty >> 8);
 717   1          PWMA_CCR1L = (u8)PWM1_Duty;
 718   1      }
 719          
 720          void Int0_isr() interrupt 0 using 0
 721          {
 722   1          if (key1 == 0)
 723   1          {
 724   2              Delaykey1();
 725   2              if (key1 == 0)
 726   2              {
 727   3                  Key_Switch++;
 728   3                  if (Key_Switch >= 3)
 729   3                  {
 730   4                      Key_Switch = 0;
 731   4                  }
 732   3              }
 733   2          }
 734   1      }
 735          /*
C51 COMPILER V9.60.7.0   MAIN                                                              10/26/2024 08:34:57 PAGE 13  

 736          void Int1_isr() interrupt 2 using 1
 737          {
 738              if (key2 == 0)
 739              {
 740                  Delaykey2();
 741                  if (key2 == 0)
 742                  {
 743                      Key_State++;
 744                      if (Key_State > 4)
 745                      {
 746                          Key_State = 0;
 747                      }
 748                  }
 749              }
 750          }
 751          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1787    ----
   CONSTANT SIZE    =     58    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      35
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
